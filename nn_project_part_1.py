# -*- coding: utf-8 -*-
"""NN project part 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Niq9MbiKMZgypw6IPJzGqSBECyDMhcec
"""

# Determines the backbone architecture:
omrisId = 123456789
yotamsId = 123456789
sumId = omrisId + yotamsId

print(f"Sum of IDs: {sumId}")

lastDigit = sumId % 10

print(f"Last digit: {lastDigit}")

if 0 <= lastDigit <= 3:
    architecture = 'ResNet18'
elif 4 <= lastDigit <= 6:
    architecture = 'VGG16'
elif 7 <= lastDigit <= 9:
    architecture = 'MobileNet V3'
else:
    architecture = 'Unknown'  # Fallback case, should never be reached

print(f"Selected Architecture: {architecture}")

pip install torch torchvision

import torch
from torchvision import models, transforms
from PIL import Image
import requests
from io import BytesIO

# Load the pre-trained ResNet18 model
model = models.resnet18(pretrained=True)
model.eval()  # Set the model to evaluation mode

# Define the transformation
transform = transforms.Compose([
    transforms.Resize(256),  # Resize the image to 256x256 pixels
    transforms.CenterCrop(224),  # Crop the image to 224x224 pixels about the center
    transforms.ToTensor(),  # Convert the image to a PyTorch tensor
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),  # Normalize the image
])

# Load an image from the internet
img_url = 'https://images.prestigeonline.com/wp-content/uploads/sites/4/2021/12/28134738/sam-moqadam-yxZSAjyToP4-unsplash-scaled-1-1275x900.jpg?tr=w-1920'  # Replace with the URL of your image
response = requests.get(img_url)
img = Image.open(BytesIO(response.content))

# Transform the image
img_t = transform(img)
batch_t = torch.unsqueeze(img_t, 0)  # Add a batch dimension

import json
import requests

# URL containing the ImageNet class index mapping
class_index_url = 'https://s3.amazonaws.com/deep-learning-models/image-models/imagenet_class_index.json'

# Download the JSON file
response = requests.get(class_index_url)
class_idx = response.json()

# Convert class index to a more accessible format
idx2label = {int(key):value for key, value in class_idx.items()}

import matplotlib.pyplot as plt
import requests
from PIL import Image
from io import BytesIO
import torch
from torchvision import models, transforms


def process_and_label_image(img_url, model, transform, idx2label):
    """
    Process an image URL, run it through the model, and display the image with labels.
    """
    # Load the image
    response = requests.get(img_url)
    img = Image.open(BytesIO(response.content))

    # Transform the image
    img_t = transform(img)
    batch_t = torch.unsqueeze(img_t, 0)

    # Run the image through the model
    with torch.no_grad():
        out = model(batch_t)

    # Decode the top 5 predictions
    _, indices = torch.sort(out, descending=True)
    percentage = torch.nn.functional.softmax(out, dim=1)[0] * 100
    top3 = [(idx2label[idx.item()][1], percentage[idx].item()) for idx in indices[0][:3]]

    # Display the image and labels
    plt.figure(figsize=(10, 10))
    plt.imshow(img)
    for i, (label, score) in enumerate(reversed(top3)):
        plt.text(0, 30 * i + 15, f'{label}: {score:.2f}%', fontsize=12, bbox=dict(facecolor='yellow', alpha=0.5))
    plt.axis('off')
    plt.show()

# Load the pre-trained ResNet18 model
model = models.resnet18(pretrained=True)
model.eval()

# Define the image transformation
transform = transforms.Compose([
    transforms.Resize(256),
    transforms.CenterCrop(224),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])

img_urls = [
    'https://cdn.britannica.com/79/232779-050-6B0411D7/German-Shepherd-dog-Alsatian.jpg',
    'https://cdn.britannica.com/77/234477-050-DF90E2ED/Doberman-pinscher-dog.jpg',
    'https://cdn.britannica.com/69/8169-050-F94FE754/Pug.jpg',
    'https://cdn.britannica.com/84/232784-050-1769B477/Siberian-Husky-dog.jpg',
    'https://cdn.britannica.com/13/234213-050-45F47984/dachshund-dog.jpg',
    'https://www.petrebels.com/en/wp-content/uploads/sites/3/2023/03/pexels-alexey-demidov-9313811-1024x683-1.jpg',
    'https://cdn.mos.cms.futurecdn.net/uiCrUgVCf64TzEdTM8x9aD-650-80.jpg.webp',
    'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSJyi6hdYy8NVpY32SBJVQx4x0W7EYgGLfZUQoojt1Pmw&s'
]

# Process and label each image in the list
for img_url in img_urls:
    process_and_label_image(img_url, model, transform, idx2label)